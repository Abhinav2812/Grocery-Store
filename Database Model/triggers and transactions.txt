#triggers

#to check that product quantity never goes below zero
DELIMITER //
CREATE TRIGGER pqty_ins BEFORE INSERT ON PRODUCT
FOR EACH ROW
BEGIN
    IF NEW.Units < 0 THEN
        SIGNAL SQLSTATE '12345' 
        SET MESSAGE_TEXT = 'No of available products cannot be less than 0';
    END IF;
END;//
CREATE TRIGGER pqty_upd BEFORE UPDATE ON PRODUCT
FOR EACH ROW
BEGIN
    IF NEW.Units < 0 THEN
        SIGNAL SQLSTATE '12345' 
        SET MESSAGE_TEXT = 'No of available products cannot be less than 0';
    END IF;
END;//
DELIMITER ;

#verify email id is in correct format
DELIMITER //
CREATE TRIGGER email_update_check BEFORE UPDATE ON USER
FOR EACH ROW
BEGIN
    IF NOT(SELECT NEW.Email_id REGEXP '^[^@]+@[^@]+\.[^@]{2,}$') THEN
        SIGNAL SQLSTATE '40001'
        SET MESSAGE_TEXT = "Invalid Email Id!";
    END IF;
END;
//
CREATE TRIGGER email_insert_check BEFORE INSERT ON USER
FOR EACH ROW
BEGIN
    IF NOT(SELECT NEW.Email_id REGEXP '^[^@]+@[^@]+\.[^@]{2,}$') THEN
        SIGNAL SQLSTATE '40001'
        SET MESSAGE_TEXT = "Invalid Email Id!";
    END IF;
END;
//
DELIMITER ;

#verify pin code uniquely determines city and state
DELIMITER //
CREATE TRIGGER verify_zip_code_insert BEFORE INSERT ON ADDRESS
FOR EACH ROW
BEGIN
    DECLARE vcity varchar(100) DEFAULT NULL;
    DECLARE vstate varchar(100) DEFAULT NULL;
    SELECT city, state INTO vcity, vstate FROM ADDRESS WHERE zip_code = NEW.zip_code LIMIT 1;
    IF vcity IS NOT NULL AND vstate IS NOT NULL THEN
        IF NOT (vcity = NEW.city AND vstate = NEW.state) THEN
            SIGNAL SQLSTATE '13232'
            SET MESSAGE_TEXT = "Pin codes do not match to city/state";
        END IF;
    END IF;
END;//
CREATE TRIGGER verify_zip_code_update BEFORE UPDATE ON ADDRESS
FOR EACH ROW
BEGIN
    DECLARE vcity varchar(100) DEFAULT NULL;
    DECLARE vstate varchar(100) DEFAULT NULL;
    SELECT city, state INTO vcity, vstate FROM ADDRESS WHERE zip_code = NEW.zip_code AND (NOT address_id = NEW.address_id)  LIMIT 1;
    IF vcity IS NOT NULL AND vstate IS NOT NULL THEN
        IF NOT (vcity = NEW.city AND vstate = NEW.state) THEN
            SIGNAL SQLSTATE '13232'
            SET MESSAGE_TEXT = "Pin codes do not match to city/state";
        END IF;
    END IF;
END;//
DELIMITER ;

#generate billing and shipping id for order
DELIMITER //
CREATE TRIGGER genbillshipid BEFORE INSERT ON G_ORDER
FOR EACH ROW
BEGIN
    DECLARE OID INT DEFAULT 0;
    SELECT auto_increment INTO OID FROM information_schema.TABLES WHERE table_name = 'G_ORDER' AND table_schema = 'gstore';
    IF(NEW.Billing_Id IS NULL) THEN
        SET NEW.Billing_id = OID + 123;
    END IF;
    IF(NEW.Shipping_Id IS NULL) THEN
        SET NEW.Shipping_id = OID + 456;
    END IF;
END;//
DELIMITER ;

#Check that Quantity available in cart is valid
DELIMITER //
CREATE TRIGGER rem_cart_update BEFORE UPDATE ON CART
FOR EACH ROW
BEGIN
    IF NEW.QUANTITY <= 0 THEN
        SIGNAL SQLSTATE '14000'
        SET MESSAGE_TEXT = 'Incorrect quantity entered';
    END IF;
END;//
CREATE TRIGGER rem_cart_insert BEFORE INSERT ON CART
FOR EACH ROW
BEGIN
    IF NEW.QUANTITY < 0 THEN
        SIGNAL SQLSTATE '14000'
        SET MESSAGE_TEXT = 'Incorrect quantity entered';
    END IF;
END;//
DELIMITER ;

#insert a product into order
DELIMITER //
CREATE TRIGGER ins_po BEFORE INSERT ON PRODUCT_ORDER
FOR EACH ROW
BEGIN
    DECLARE cost DOUBLE DEFAULT NULL;
    SELECT price INTO cost FROM PRODUCT WHERE product_id = NEW.Product_id;
    SET NEW.Price = cost; 
    UPDATE PRODUCT SET Units = Units - NEW.Quantity Where PRODUCT.Product_id = NEW.Product_id;
    UPDATE G_ORDER SET amount = amount + (NEW.Price)*(NEW.Quantity) WHERE Order_id = NEW.Order_id;
END;//
CREATE TRIGGER upd_po BEFORE UPDATE ON PRODUCT_ORDER
FOR EACH ROW
BEGIN
    UPDATE PRODUCT SET Units = Units - NEW.Quantity + OLD.Quantity Where PRODUCT.Product_id = NEW.Product_id;
    UPDATE G_ORDER SET amount = amount + (NEW.Price)*(NEW.Quantity-OLD.Quantity) WHERE Order_id = NEW.Order_id;
END;//
DELIMITER ;

#procedures

#place order from user cart atomic transaction

DELIMITER //
CREATE PROCEDURE PLACEORDER(IN username varchar(100),IN pay_method varchar(100),IN address_id INT)
BEGIN
    DECLARE ord INT DEFAULT 0;
    DECLARE done INT DEFAULT FALSE;
    DECLARE pid INT DEFAULT 0;
    DECLARE Qty INT DEFAULT 0;
    DECLARE avlQty INT DEFAULT 0;
    DECLARE cur CURSOR FOR SELECT Product_id,Quantity FROM CART WHERE user_id = username;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    DECLARE exit handler for sqlexception
    BEGIN
        -- ERROR
        SIGNAL SQLSTATE '10000' SET MESSAGE_TEXT = "ERROR IN PROCEDURE";
        ROLLBACK;
    END;
    DECLARE exit handler for sqlwarning
    BEGIN
        -- WARNING
        SIGNAL SQLSTATE '10000' SET MESSAGE_TEXT = "WARNING IN PROCEDURE";
        ROLLBACK;
    END;
    OPEN cur;
    START TRANSACTION;
    SELECT auto_increment INTO ord FROM information_schema.TABLES WHERE table_name = 'G_ORDER' AND table_schema = 'gstore';
    INSERT INTO G_ORDER (Payment_Method, Address_id, user_id) VALUES (pay_method, address_id,username);
    read_loop : LOOP
        FETCH cur INTO pid,Qty;
        IF done THEN
            LEAVE read_loop;
        END IF;
        INSERT INTO PRODUCT_ORDER(Product_id, Order_id, Quantity) VALUES (pid,ord,qty);
    END LOOP;
    DELETE FROM CART WHERE user_id = username;
    COMMIT;
END;//
DELIMITER ;
